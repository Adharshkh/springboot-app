pipeline{
    agent any
    environment {
	REPOSITORY = "039033235676.dkr.ecr.us-east-2.amazonaws.com"
        IMAGE = "spring-app-dev"
        TAG = "${BUILD_NUMBER}"
        REGION = "us-east-2"
        SCANNER_HOME=tool 'sonar-scanner'
        TRIVY_PASSWORD = credentials('user-passwd')
    }

    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }

        stage('Checkout from Git'){
            steps{
                git branch: 'dev', url: 'https://github.com/Adharshkh/springboot-app.git/'
            }
        }
        
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=spring-app \
                    -Dsonar.projectKey=spring-app '''
                }
            }
        }
        
        stage('OWASP Dependency Checking') {
            steps{
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'OWASP-Dependency-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage("Docker Build & Push"){
            steps{
                script{
                    sh "pwd"
                    sh "aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 039033235676.dkr.ecr.us-east-2.amazonaws.com"
                    sh "docker build -t spring-app-dev ."
                    sh "docker tag ${IMAGE} ${REPOSITORY}/${IMAGE}:${TAG} "
                    sh "docker push ${REPOSITORY}/${IMAGE}:${TAG} "
                    sh "docker tag ${IMAGE} ${REPOSITORY}/${IMAGE}:latest "
                    sh "docker push ${REPOSITORY}/${IMAGE}:latest "
                }
            }

        }

        stage('Install trivy'){
            steps{
                sh "wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb"
                sh "echo ${TRIVY_PASSWORD} | sudo -S dpkg -i trivy_0.18.3_Linux-64bit.deb"
            }
        }

        stage(' Trivy Scan') {
            steps {
                // Scan again and fail on CRITICAL vulns
                sh "echo ${TRIVY_PASSWORD} | sudo -S trivy image ${REPOSITORY}/${IMAGE}:latest"

            }
        }

        stage('Update Helm Chart Image Tag') {
            steps {
                script {

                    // Print the working directory
                    sh 'pwd'

                    // List files in the current directory
                    sh 'ls'

                    def helmChartPath = '/var/lib/jenkins/workspace/build-pipeline-2'  // Path to your Helm Chart folder in the Git repo
                    def valuesFilePath = "${helmChartPath}/springboot-app-chart/values.yaml"
                    
                    // Replace the image tag in the values.yaml file
                    sh "sed -i 's/tag:.*/tag: ${TAG}/' ${valuesFilePath}"
                    
                    // Configure Git to use provided credentials
                    withCredentials([usernamePassword(credentialsId: 'springboot-app-2', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh "git -C ${helmChartPath} config --local credential.helper '!f() { echo username=${GIT_USERNAME}; echo password=${GIT_PASSWORD}; }; f'"
                        sh "git -C ${helmChartPath} add ${valuesFilePath}"
                        sh "git -C ${helmChartPath} commit -m 'Update image tag'"
                    
                    // Push the merged changes
                    sh "git -C ${helmChartPath} push origin HEAD:main"
                    }
                }
            }
        }
    }
}